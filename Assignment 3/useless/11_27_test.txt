import java.io.*;
import java.util.ArrayList;

class State{
    int[] board;
    int moves;      
    State pre_state;
    int Mht_sum;
    int zero_id;
    int priority;

    public State(State pre_state, int moves, int[] board){
        this.pre_state = pre_state;
        this.moves = moves;
        this.board = board;
        this.Mht_sum = this.get_Mht_sum();
        this.priority = this.moves + this.Mht_sum;
        this.get_zeroid();
    }

    public int get_Mht_sum(){
        int sum = 0;
        int[] arr = this.board;
        for(int i = 0;i<arr.length;i++){
            if(arr[i] != 0){
                int x = (arr[i]-1)/3;
                int y = (arr[i]-1)%3;
                int x0 = i/3;
                int y0 = i%3;
                int x_dis = Math.abs(x-x0);
                int y_dis = Math.abs(y-y0);
                sum = sum + x_dis + y_dis;
            }            
        }
        this.Mht_sum = sum;
        return sum;
    }

    public int get_zeroid(){
        for(int i = 0;i<this.board.length;i++){
            if(this.board[i] == 0){
                zero_id = i;
            }//Search for the position of 0
        }
        return zero_id;
    }

    public int get_priority(){
        this.priority = this.moves + this.Mht_sum;
        return this.priority;
    }

    public ArrayList<State> derive_son(){
        //for a state, we can derive possible next states
        ArrayList<State> sons = new ArrayList<State>();
        if(zero_id%3 != 0){//mod = 0 can't left
            State leftState = new State(this, this.moves+1, deepCopy(this.board));
            //Make a deep copy of its parent node first
            leftState.board[zero_id] = leftState.board[zero_id-1];
            leftState.board[zero_id-1] = 0;
            leftState.get_Mht_sum();    //renew the data field
            leftState.get_zeroid();
            leftState.get_priority();
            sons.add(leftState);
        }

        if(zero_id%3 != 2){//mod = 2 can't right
            State rightState = new State(this, this.moves+1, deepCopy(this.board));
            //Make a deep copy of its parent node first
            rightState.board[zero_id] = rightState.board[zero_id+1];
            rightState.board[zero_id+1] = 0;
            rightState.get_Mht_sum();
            rightState.get_zeroid();
            rightState.get_priority();
            sons.add(rightState);
        }

        if(zero_id/3 != 0){//The quotient is 0 and can't go up
            State upState = new State(this, this.moves+1, deepCopy(this.board));
            upState.board[zero_id] = upState.board[zero_id-3];
            upState.board[zero_id-3] = 0;
            upState.get_Mht_sum();
            upState.get_zeroid();
            upState.get_priority();
            sons.add(upState);
        }
        
        if(zero_id/3 != 2){//A quotient of two cannot go up
            State downState = new State(this, this.moves+1, deepCopy(this.board));
            downState.board[zero_id] = downState.board[zero_id+ 3];
            downState.board[zero_id+3] = 0;
            downState.get_Mht_sum();
            downState.get_zeroid();
            downState.get_priority();
            sons.add(downState);
        }
        return sons;
        
    }

    public int[] deepCopy(int[] arr){
        //deep copy the board
        int[] newArr = new int[arr.length];
        for(int i = 0;i<arr.length;i++){
            newArr[i] = arr[i];
        }
        return newArr;
    }

    public void print(){
        for(int i = 0;i<9;i++){
            if(i%3 == 0)
                System.out.println();
            if(this.board[i] == 0)
                System.out.print(" " + " ");
            else
                System.out.print(this.board[i] + " ");
        }
        System.out.println("priority: " + this.priority);
        System.out.println();
    }

    public boolean check_end(){
        //check the state is {1,2,3,4,5,6,7,8,0}
        for(int i = 0;i<8;i++){
            if (this.board[i] != i+1)
                return false;
        }
        System.out.println("true");
        return true;
    }

    public String strOutput(){
        //out put the board as a square string
        String output_str = "";
        for(int i = 0;i<9;i++){
            output_str = output_str + this.board[i];
            if(i%3==2){
                output_str = output_str + "\n";
            }
            else if (i != 8){
                output_str = output_str + " ";
            }
        }
        return output_str;
    }
}

class PrioQueue{
    ArrayList<State> list = new ArrayList<State>();
    ArrayList<State> cast_list = new ArrayList<State>();

    public PrioQueue(State ini_state){//initialize the queue with the 
        this.list.add(ini_state);
    }

    public boolean is_equal(int[] arr1,int[] arr2){
        for(int i = 0;i<arr1.length;i++){
            if(arr1[i] != arr2[i]){
                return false;
            }
        }
        return true;
    }

    public boolean is_inArr(ArrayList<State> Array,int[] arr){
        int len = Math.min(arr.length, Array.size());
        for(int i = 0;i<len;i++){
            if(is_equal(arr, Array.get(i).board)){
                return true;
            }
        }
        return false;
    }

    public void enqueue(State newState){
        
        
        if(this.list.isEmpty()){
            this.list.add(newState);
        }
        else{
            for(int i = 0;i< this.list.size();i++){
                if(newState.priority<this.list.get(i).priority){
                    
                    this.list.add(i,newState);
                    return;
                }
            }
            this.list.add(newState);
        }    
    
    }

    public void print_queue(){
        for(State e:this.list){
            e.print();
            for(int ele:e.board){
                System.out.print(ele + " ");
            }
            System.out.println("priority: " + e.priority);
            System.out.println("MOVES: " + e.moves);
            System.out.println("MANHATON: " + e.Mht_sum);

        }
    }

    public void derive_son(){
        if(this.list.isEmpty()){
            System.out.println("***Empty list!!!***");
        }
        else{
            this.list.get(0).print();
            
            ArrayList<State> sons = this.list.get(0).derive_son();
            this.list.remove(0);

            for(State e: sons){
                if(is_inArr(this.cast_list,e.board) == false){
        
                    this.enqueue(e);
                }
            }
        }
    }

    public String solution(){
        String output_str = "";
        while(this.list.get(0).check_end()!=true){
            this.derive_son();// find and derive sons until the end comes up
            //this.print_queue();
        }
        
        State temp = this.list.get(0);
        System.out.println("Steps:" + temp.moves);
        ArrayList<State> solulList = new ArrayList<State>();
        while(temp.pre_state != null){
            solulList.add(0,temp);
            temp = temp.pre_state;
        }
        solulList.add(0,temp);
        for(int i = 0;i<solulList.size();i++){
            //solulList.get(i).print();
            output_str = output_str + solulList.get(i).strOutput();
            output_str = output_str + "\n";
        }
        return output_str;
    }

}

public class test{

    public static boolean check_solvable(int[] arr){
        return true;
    }

    public static void main(String[] args) {
        //int[] ini = {4,2,0,7,3,1,8,6,5};
        
        int[] ini = {1,2,6,5,4,3,7,8,0};
        State iniState = new State(null,0,ini);
        PrioQueue queue = new PrioQueue(iniState);
        //queue.list.get(0).print();
        //queue.derive_son();
        //queue.print_queue();
        queue.solution();
    }
}